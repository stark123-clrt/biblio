# .github/workflows/ci-cd.yml
# Pipeline CI/CD pour Biblioth√®que

name: CI/CD Pipeline - Biblioth√®que

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]

env:
  PHP_VERSION: '8.2'
  COMPOSER_CACHE_DIR: ~/.composer/cache

jobs:
  # =========================================
  # JOB 1: TESTS ET QUALIT√â DU CODE
  # =========================================
  tests:
    name: Tests & Code Quality
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: bibliotheque_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: pdo, pdo_mysql, mbstring, xml, bcmath, gd
          coverage: xdebug
          tools: composer

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.COMPOSER_CACHE_DIR }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install PHP dependencies
        run: |
          composer install --no-progress --no-suggest --no-interaction --prefer-dist --optimize-autoloader

      - name: Validate composer.json
        run: composer validate --strict

      - name: Security check
        run: |
          composer audit
          wget -O security-checker https://github.com/fabpot/local-php-security-checker/releases/download/v2.0.6/local-php-security-checker_2.0.6_linux_amd64
          chmod +x security-checker
          ./security-checker --path=composer.lock

      - name: Setup test environment
        run: |
          cp .env.example .env.testing
          echo "APP_ENV=testing" >> .env.testing
          echo "DB_HOST=127.0.0.1" >> .env.testing
          echo "DB_PORT=3306" >> .env.testing
          echo "DB_NAME=bibliotheque_test" >> .env.testing
          echo "DB_USER=root" >> .env.testing
          echo "DB_PASS=password" >> .env.testing
          echo "APP_DEBUG=true" >> .env.testing
          echo "SHOW_ERRORS=true" >> .env.testing

      - name: Wait for MySQL
        run: |
          until mysql -h 127.0.0.1 -P 3306 -u root -ppassword -e "SELECT 1"; do
            echo "Waiting for MySQL..."
            sleep 2
          done

      - name: Run database migrations
        run: |
          mysql -h 127.0.0.1 -P 3306 -u root -ppassword bibliotheque_test < database/schema.sql || echo "Schema import failed, continuing..."

      - name: Run PHPUnit tests
        run: |
          echo "üß™ Ex√©cution de tous les tests..."
          composer ci

      - name: Upload coverage reports
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30
        continue-on-error: true

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: |
            storage/logs/
            tests/reports/
          retention-days: 7

  # =========================================
  #  JOB 2: S√âCURIT√â ET VULN√âRABILIT√âS
  # =========================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: Install dependencies
        run: composer install --no-dev --optimize-autoloader

      - name: Security vulnerability scan
        run: |
          composer audit
          echo "Recherche de vuln√©rabilit√©s dans le code..."
          grep -r "eval\|exec\|system\|shell_exec" --include="*.php" . || echo "Aucune fonction dangereuse d√©tect√©e"
          echo "V√©rification des permissions..."
          find . -name "*.env*" -type f -exec ls -la {} \; || echo "Pas de fichiers .env trouv√©s"

  # =========================================
  # JOB 3: BUILD PHP
  # =========================================
  build:
    name: Build PHP Artifacts
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Upload PHP artifacts
        uses: actions/upload-artifact@v4
        with:
          name: php-artifacts
          path: |
            classes/
            vendor/
            storage/
          retention-days: 30

  # =========================================
  # JOB 4: D√âPLOIEMENT STAGING - TOUJOURS ACTIF
  # =========================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [tests, security, build]
  

    environment:
      name: staging
      url: https://bibliotheque-enligne.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download PHP artifacts
        uses: actions/download-artifact@v4
        with:
          name: php-artifacts

      - name: Deploy to staging server
        run: |
          echo "üöÄ D√©ploiement vers STAGING..."
          echo "üìç Branche: ${{ github.ref_name }}"
          echo "üìç Commit: ${{ github.sha }}"
          
          mkdir -p ~/.ssh
          echo "${{ secrets.STAGING_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          echo "üìÅ Synchronisation des fichiers..."
          # rsync -avz --delete ./ user@staging-server:/path/to/app/
          
          echo "üîÑ Mise √† jour des d√©pendances..."
          # ssh user@staging-server "cd /path/to/app && composer install --no-dev --optimize-autoloader"
          
          echo "üóÉÔ∏è Migration base de donn√©es..."
          # ssh user@staging-server "cd /path/to/app && php migrate.php"
          
          echo "‚úÖ D√©ploiement STAGING termin√© !"

      - name: Health check staging
        run: |
          echo "üè• V√©rification de sant√©..."
          # curl -f https://staging.bibliotheque-enligne.com/health || exit 1

  # =========================================
  # JOB 5: D√âPLOIEMENT PRODUCTION - TOUJOURS ACTIF
  # =========================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [tests, security, build]
  

    environment:
      name: production
      url: https://bibliotheque-enligne.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download PHP artifacts
        uses: actions/download-artifact@v4
        with:
          name: php-artifacts

      - name: Deploy to production
        run: |
          echo " D√âPLOIEMENT PRODUCTION..."
          echo "Branche: ${{ github.ref_name }}"
          echo "Event: ${{ github.event_name }}"
          echo "Commit: ${{ github.sha }}"
          
          echo " Sauvegarde de la base de donn√©es..."
          # ssh user@prod-server "mysqldump bibliotheque > backup-$(date +%Y%m%d_%H%M%S).sql"
          
          echo " Activation du mode maintenance..."
          # ssh user@prod-server "touch /path/to/app/maintenance.mode"
          
          echo "D√©ploiement des fichiers..."
          # rsync -avz --delete ./ user@prod-server:/path/to/app/
          
          echo "Mise √† jour application..."
          # ssh user@prod-server "cd /path/to/app && composer install --no-dev --optimize-autoloader"
          # ssh user@prod-server "cd /path/to/app && php migrate.php"
          
          echo "D√©sactivation du mode maintenance..."
          # ssh user@prod-server "rm -f /path/to/app/maintenance.mode"
          
          echo " D√âPLOIEMENT PRODUCTION TERMIN√â !"

      - name: Post-deployment tests
        run: |
          echo " Tests post-d√©ploiement..."
          # curl -f https://bibliotheque-enligne.com/health
          # curl -f https://bibliotheque-enligne.com/api/status

      - name: Notify deployment success
        run: |
          echo "Notification de succ√®s..."
          # Envoyer notification Slack, email, etc.

  # =========================================
  #  JOB 6: M√âTRIQUES ET MONITORING
  # =========================================
  metrics:
    name: Collect Metrics
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Collect deployment metrics
        run: |
          echo " Collecte des m√©triques..."
          echo "Build ID: ${{ github.run_id }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"
          # curl -X POST "https://monitoring.example.com/metrics" \
          #   -H "Content-Type: application/json" \
          #   -d '{"deployment_id": "${{ github.run_id }}", "status": "success"}'